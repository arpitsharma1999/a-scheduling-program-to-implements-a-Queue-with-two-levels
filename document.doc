Student name: Arpit Sharma
Student Id: 11812449
Email Address: arpit.sh9068@gmail.com
GitHub Link: https://github.com/arpitsharma1999/a-scheduling-program-to-implements-a-Queue-with-two-levels
Code :      4. Design a scheduling program to implements a Queue with two levels.


1. Operating system concept-
Description: 

Multilevel Feedback Queue Scheduling (MLFQ) (In this given problem we have two level)keep analyzing the behavior (time of execution) of processes and according to which it changes its priority.



LEVEL 1

LEVEL 2


Level 1 : Fixed priority preemptive Scheduling
Level 2 : Round Robin Scheduling
For a Fixed priority pre-emptive scheduling if one process P1 is scheduled and running and another process P2 with higher priority comes. The New process with high priority process P2 preempts currently running process P1 and process P1 will go to second level queue. Time for which process will strictly execute must be considered in the multiples of 2.
All the processes in second level queue will complete their execution according to round robin scheduling.
In this program Queue 2 will be processed after Queue 1 becomes empty and Priority of Queue 2 has lower priority than in Queue 1.


2. Algorithm:

In this problem we are using two type of scheduling algorithm –
1. Multilevel queue Scheduling
2. Round Robin 

Algorithm for Multilevel queue scheduling-


1.	When a process starts executing then it first enters queue 1.
2.	In queue 1 process executes for 4 unit and if it completes in this 4 unit or it gives CPU for I/O operation in this 4 unit than the priority of this process does not change and if it again comes in the ready queue than it again starts its execution in Queue 1.
3.	If a process in queue 1 does not complete in 4 unit then its priority gets reduced and it shifted to queue 2.
4.	Above points 2 and 3 are also true for queue 2 processes but the time quantum is 4 unit. In a general case if a process does not complete in a time quantum than it is shifted to the lower priority queue.
5.	In the last queue, processes are scheduled in FCFS manner.
6.	A process in lower priority queue can only execute only when higher priority queues are empty.
7.	A process running in the lower priority queue is interrupted by a process arriving in the higher priority queue.
Algorithm for Round Robin-


1- Create an array rem_bt[] to keep track of remaining
   burst time of processes. This array is initially a 
   copy of bt[] (burst times array)
2- Create another array wt[] to store waiting times
   of processes. Initialize this array as 0.
3- Initialize time : t = 0
4- Keep traversing the all processes while all processes
   are not done. Do following for i'th process if it is
   not done yet.

a-  If rem_bt[i] > quantum
(i)  t = t + quantum
(ii) bt_rem[i] -= quantum;
c- Else // Last cycle for this process
(i)  t = t + bt_rem[i];
           (ii) wt[i] = t - bt[i]
           (ii) bt_rem[i] = 0; // This process is over












Code snippet:

#include<stdio.h>
//#include<iostream>
using namespace std;
//Creating structure of process which have its attributes.
struct process
{
    int pro_name; // process name eg-1,2 int type
    int arrT; // arriving time
	int  wtT; // wating time
	int turnT; // turnaroundnd time
	int pri; // priority
	int  busTc; // burst time
	int busT; // 
}q1[10],q2[10]; // declaring two queue 1st for fixed priority priamtive scheduling 2nd round robin
int main()
{
	struct process temp; //temporary  queue for storing the info of proccess
            int i,time=0,t1,t2,bu_t=0;
	int largest,totalProcess,count=0,k,pf2=0,totalProcess2,n,pos,j,flag=0,y;
           float wait_time=0,turnaround_time=0;							float  average_waiting_time,average_turnaround_time;
    printf("\n Enter Total Number of Processes:\t");
    scanf("%d", &totalProcess);
    n=totalProcess;
    for(i=0;i<totalProcess;i++)
    {	fflush(stdin);
    	printf("\nEnter Process name-");
    	
        scanf("%d",&q1[i].pro_name);
        printf("\nEnter Details For processor %d-\n",q1[i].pro_name);
        printf("Enter Arrival Time:-\n");
        scanf("%d",&q1[i].arrT);
        printf("Enter Burst Time-\n");
        scanf("%d",&q1[i].busT);
        q1[i].busTc=q1[i].busT;
        printf("Enter Priority-\n");
        scanf("%d",&q1[i].pri);
    }
    printf("\nEnter Time Quantum for Fixed priority queue-");
    scanf("%d",&t1);
    printf("\nEnter Time Quantum for Round Robin-");
    scanf("%d",&t2);
    printf("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
    for(i=0;i<totalProcess;i++)
    {
        pos=i;
        for(j=i+1;j<totalProcess;j++)
        {		//cout<<q1[j].arrT<<"Arpit Sharma";
            if(q1[j].arrT<q1[pos].arrT)
                pos=j;
        }
        temp=q1[i];
        q1[i]=q1[pos];
        q1[pos]=temp;
    }
    time=q1[0].arrT;
    for(i=0;totalProcess!=0;i++)
    {
    	while(count!=t1)
    	{
    		count++;
    		if(q1[i].arrT<=time)
    		{
    			for(j=i+1;j<totalProcess;j++)
    			{
    				if(q1[j].arrT==time && q1[j].pri<q1[i].pri)
    				{
    					q2[pf2]=q1[i]; //putting process in second queue
						pf2++;
    					for(k=i; k<totalProcess-1;k++)
    						q1[k]=q1[k+1];
    					totalProcess--;
						count=0;
    					i=j-1;
    					j--;
					}
				}
			}
			time++;
			q1[i].busT--;
			if(q1[i].busT==0)
			{
				q1[i].turnT=time-q1[i].arrT;
				q1[i].wtT=q1[i].turnT-q1[i].busTc;
				printf("%d\t|\t%d\t|\t%d\n",q1[i].pro_name,q1[i].turnT,q1[i].wtT);
				wait_time+=time-q1[i].wtT; 
    			turnaround_time+=time-q1[i].turnT;
    			for(k=i;k<totalProcess-1;k++)
    				q1[k]=q1[k+1];i--;
    			totalProcess--;
				count=t1;break;
			}
		}
		count=0;
		if(q1[i].busT!=0)
		{
			q2[pf2]=q1[i];
			pf2++;
			for(k=i;k<totalProcess-1;k++)
    			q1[k]=q1[k+1];
    		totalProcess--;
		}
			if(i==totalProcess-1)
				i=-1;
	}
	
	totalProcess2=pf2;
	for(count=0;totalProcess2!=0;) 
	{ 
		if(q2[count].busT<=t2&&q2[count].busT>0) 
    	{ 
    		time+=q2[count].busT; 
    		q2[count].busT=0; 
    		flag=1; 
    	} 
    	else if(q2[count].busT>0) 
    	{ 
    		q2[count].busT-=t2; 
    		time+=t2; 
    	} 
    	if(q2[count].busT==0&&flag==1) 
    	{ 
    		totalProcess2--; 
    		q2[count].turnT=time-q2[count].arrT;
			q2[count].wtT=q2[count].turnT-q2[count].busTc; 
			printf("%d\t|\t%d\t|\t%d\n",q2[count].pro_name,q2[count].turnT,q2[count].wtT); 
    		turnaround_time+=time-q2[count].arrT; 
    		wait_time+=time-q2[count].arrT-q2[count].busTc;
    		for(k=count; k<totalProcess2;k++)
    			q2[k]=q2[k+1];count--;
    		flag=0; 
    	} 

    	if(count==totalProcess2-1) 
      		count=0; 
    	else 
    		count++; 
    }
    printf("\n Average Waiting Time= %f\n", wait_time/n); 
    printf("Avg Turnaround Time = %f" ,turnaround_time/n);  
    return 39; 
}
Complexity:  O(n3)
Boundary Conditions:
•	Level 1 : Fixed priority preemptive Scheduling
•	Level 2 : Round Robin Scheduling
•	Consider: 1. Queue 2 will be processed after Queue 1 becomes empty.
•	Consider 2. Priority of Queue 2 has lower priority than in Queue 1.

Test cases:

Process	Arrival Time	Burst Time	Priority	Turnaround Time	Waiting Time
1	           1	          4       	1       	4           	0
2	           5	          3        	1	        3           	0
3            6          	8	        2       	14	          6
4	           7	          7   	    1	        16	          9


Process	Arrival Time	Burst Time	Priority	Turnaround Time	  Waiting Time
1     	0	                14        	2       	44            	30
2      	7	                8	          1	        31	            16
3	      3	                10	        0	        41	            28
4	      5	                7	          2	        34	            22
5	      1	                5	          3   	    35	            29


















